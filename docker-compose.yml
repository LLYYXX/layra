services:
  # 数据库服务
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-password}
      MYSQL_DATABASE: imagedb
      MYSQL_USER: mysqluser
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10

  mongodb:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongouser
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD:-password}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-password}"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-password}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: miniouser
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-password}
    ports:
      - "9110:9110"
      - "9111:9111"
    volumes:
      - minio_data:/data
    command: server /data --console-address :9111 --address :9110
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9110/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Kafka服务
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data

  milvus:
    image: milvusdb/milvus:v2.2.9
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9110
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - etcd
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 3

  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd --advertise-client-urls=http://etcd:2379 --listen-client-urls http://0.0.0.0:2379 --data-dir /etcd

  # 后端API服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    environment:
      DB_URL: "mysql+asyncmy://mysqluser:${MYSQL_PASSWORD:-password}@mysql/imagedb"
      MONGODB_URL: "mongodb:27017"
      MONGODB_DB: "mongodb"
      MONGODB_ROOT_USERNAME: "mongouser"
      MONGODB_ROOT_PASSWORD: "${MONGODB_ROOT_PASSWORD:-password}"
      REDIS_URL: "redis:6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD:-password}"
      SECRET_KEY: "${SECRET_KEY:-your-secret-key-here}"
      ALGORITHM: "HS256"
      MINIO_URL: "http://minio:9110"
      MINIO_ACCESS_KEY: "miniouser"
      MINIO_SECRET_KEY: "${MINIO_SECRET_KEY:-password}"
      MINIO_BUCKET_NAME: "ai-chat"
      MILVUS_URI: "http://milvus:19530"
      KAFKA_BROKER_URL: "kafka:9092"
      # OpenRouter配置 - API密钥从.env文件读取
      USE_API_EMBEDDING: "${USE_API_EMBEDDING:-true}"
      EMBEDDING_API_URL: "${EMBEDDING_API_URL:-https://openrouter.ai/api/v1}"
      EMBEDDING_MODEL_NAME: "${EMBEDDING_MODEL_NAME:-qwen/qwen2.5-vl-32b-instruct}"
      IMAGE_EMBEDDING_MODEL_NAME: "${IMAGE_EMBEDDING_MODEL_NAME:-qwen/qwen2.5-vl-32b-instruct}"
      # 以下为可选配置，不设置则不发送站点信息
      # SITE_URL: "${SITE_URL}"
      # SITE_NAME: "${SITE_NAME}"
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      milvus:
        condition: service_healthy
      kafka:
        condition: service_started

  # 模型服务器
  model_server:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["python", "model_server.py"]
    env_file:
      - ./.env
    depends_on:
      - backend

  # 前端服务
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: "http://backend:8000"
    ports:
      - "3000:3000"
    depends_on:
      - backend

volumes:
  mysql_data:
  mongodb_data:
  redis_data:
  minio_data:
  etcd_data:
  zookeeper_data:
  kafka_data: 