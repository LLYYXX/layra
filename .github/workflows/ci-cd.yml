name: LAYRA CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: 登录Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: 构建并推送后端镜像
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/layra-backend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/layra-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/layra-backend:buildcache,mode=max
      
      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      
      - name: 构建前端
        run: |
          cd web
          npm install
          npm run build
      
      - name: 构建并推送前端镜像
        uses: docker/build-push-action@v4
        with:
          context: ./web
          file: ./web/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/layra-frontend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/layra-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/layra-frontend:buildcache,mode=max
          
  deploy-to-server:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        
      - name: 生成部署配置文件
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          # 创建环境变量模板文件
          cat > .env << EOL
          # 数据库配置
          DB_URL=mysql+asyncmy://mysqluser:mysql577715@mysql/imagedb
          MONGODB_URL=mongodb:27017
          MONGODB_DB=mongodb
          MONGODB_ROOT_USERNAME=mongouser
          MONGODB_ROOT_PASSWORD=mongo577715
          
          # Redis配置
          REDIS_URL=redis:6379
          REDIS_PASSWORD=redis577715
          REDIS_TOKEN_DB=0
          REDIS_TASK_DB=1
          REDIS_LOCK_DB=2
          
          # JWT配置
          SECRET_KEY=TestCodeForLLMProject
          ALGORITHM=HS256
          ACCESS_TOKEN_EXPIRE_MINUTES=36000
          
          # MinIO配置
          MINIO_URL=http://minio:9110
          MINIO_ACCESS_KEY=miniouser
          MINIO_SECRET_KEY=minio577715
          MINIO_BUCKET_NAME=ai-chat
          
          # Milvus配置
          MILVUS_URI=http://milvus:19530
          
          # 其他配置
          MAX_WORKERS=10
          LOG_LEVEL=INFO
          LOG_FILE=layra.log
          DEBUG_MODE=true
          
          # 模型配置
          COLBERT_MODEL_PATH=/app/colqwen2.5-v0.2
          USE_API_EMBEDDING=true
          EMBEDDING_API_URL=https://openrouter.ai/api/v1
          EMBEDDING_API_KEY=${{ secrets.EMBEDDING_API_KEY }}
          EMBEDDING_MODEL_NAME=openai/text-embedding-3-large
          IMAGE_EMBEDDING_MODEL_NAME=openai/gpt-4o
          SITE_URL=${{ secrets.SITE_URL || 'https://layra.app' }}
          SITE_NAME="LAYRA Document RAG"
          
          # Kafka配置
          KAFKA_BROKER_URL=kafka:9094
          KAFKA_TOPIC=task_generation
          KAFKA_GROUP_ID=task_consumer_group
          EOL
          
          # 创建远程服务器部署脚本
          cat > deploy.sh << EOL
          #!/bin/bash
          cd /opt/layra
          docker-compose pull
          docker-compose down
          docker-compose up -d
          EOL
          chmod +x deploy.sh
      
      - name: 配置SSH密钥
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          if_key_exists: replace
      
      - name: 将文件传输到服务器
        run: |
          # 创建远程目录
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p /opt/layra"
          
          # 传输部署所需文件
          scp docker-compose.yml .env deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/layra/
      
      - name: 执行远程部署
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd /opt/layra && chmod +x deploy.sh && ./deploy.sh" 